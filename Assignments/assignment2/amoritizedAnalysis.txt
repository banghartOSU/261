1)	How many cost units are spent in the entire process of performing 50 consecutive push operations on an empty array which starts 
	out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the average big-oh complexity for a push?
	*******************************************************************************************************************************

Average big-oh complexity: O(1)+
Number of cost units: 106

Proof:
	Base case: (size: 0, capacity: 8, cost_units: 0, sum_of_cost_units: 0)
	
	Add 8 elements: (size: 8, capacity: 8, cost_units: 8, sum_of_cost_units: 8)
	Add 1 element, resize: (size: 9, capacity: 16, cost_units: 9, sum_of_cost_units: 17)
	Add 7 elements: (size: 16, capacity: 16, cost_units: 7, sum_of_cost_units: 24)
	Add 1 element, resize: (size: 17, capacity: 32, cost_units: 17, sum_of_cost_units: 41)
	Add 15 elements: (size: 32, capacity: 32, cost_units: 15, sum_of_cost_units: 56)
	Add 1 element, resize: (size: 33, capacity: 64, cost_units: 33, sum_of_cost_units: 89)
	Add 17 elements: (size: 50, capacity: 64, cost_units: 17, sum_of_cost_units: 106)

To answer this question, it is best to make a small table that will keep track of number of operations each "push" requires as well as the running total of cost units this would require. In doing so we find that as n nears infinity, we should expect a nearly constant big-oh complexity. Specifically, O(1)+ since when we attempt to "push()" an element into a full array we must first copy the elements from the original one into a newly created one with a larger capacity. This is an O(n) action which depends on how many elements we need to copy over. However, since when we resize the array, we also double the capacity, we will need to resize less frequently the more elements we choose to add. 

push()/size  capacity  operations 	   cost units 
===========  ========  ========== 	  ============
0		8		0		0 ---- Base Case				
1		8		1		1
2		8		1		2
3		8		1		3
4		8		1		4
5		8		1		5
6		8		1		6
7		8		1 		7
8		8		1		8
9---------------16----------8 + 1 --------------17	
10		16		1		18
11		16		1		19
12		16		1		20
13		16		1		21
14		16		1		22
15		16		1		23		
16		16		1		24
17--------------32---------16 + 1---------------41	
18		32		1		42
19		32		1		43
20		32		1		44
21		32		1		45
22		32		1		46
23		32		1		47
24		32		1		48
25		32		1		49	
26		32		1		50
27		32		1		51
28		32		1		52
29		32		1		53
30		32		1		54
31		32		1		55
32		32		1		56
33--------------64---------32 + 1---------------89
34		64		1		90
35		64		1		91
36		64		1		92
37		64		1		93
38		64		1		94
39		64		1		95
40		64		1		96
41		64		1		97
42		64		1		98
43		64		1		99
44		64		1		100
45		64		1		101
46		64		1		102
47		64		1		103
48		64		1		104
49		64		1		105
50		64		1		106

2) 	How many cost units are spent in the entire process of performing 50 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the average big-oh complexity for a push?
	*******************************************************************************************************************************************

Cost units: 630
Big-oh complexity: O(n^2)

As the number of elements increases, the amount of the resize remains constant. Therefore a large n will require more expensive copying operations each time we need to resize. Essentially, the sum of the cost units appears to grow exponentially and, thus, we can say that the big-oh complexity is roughly O(n^2).



Proof: 
	Base case: (size: 0, capacity: 8, cost_units: 0, sum_of_cost_units: 0)

	Add 9 elements, resize (size: 9,  capacity: 10, cost_units: 9,  sum_of_cost_units: 9)
	Add 2 elements, resize (size: 11, capacity: 12, cost_units: 12, sum_of_cost_units: 21)
	Add 2 elements, resize (size: 13, capacity: 14, cost_units: 14, sum_of_cost_units: 35)
	Add 2 elements, resize (size: 15, capacity: 16, cost_units: 16, sum_of_cost_units: 51)
	Add 2 elements, resize (size: 17, capacity: 18, cost_units: 18, sum_of_cost_units: 69)
	Add 2 elements, resize (size: 19, capacity: 20, cost_units: 20, sum_of_cost_units: 89)
	Add 2 elements, resize (size: 21, capacity: 22, cost_units: 22, sum_of_cost_units: 111)
	Add 2 elements, resize (size: 23, capacity: 24, cost_units: 24, sum_of_cost_units: 135)
	Add 2 elements, resize (size: 25, capacity: 26, cost_units: 26, sum_of_cost_units: 161)
	Add 2 elements, resize (size: 27, capacity: 28, cost_units: 28, sum_of_cost_units: 189)
	Add 2 elements, resize (size: 29, capacity: 30, cost_units: 30, sum_of_cost_units: 219)
	Add 2 elements, resize (size: 31, capacity: 32, cost_units: 32, sum_of_cost_units: 251)
	Add 2 elements, resize (size: 33, capacity: 34, cost_units: 34, sum_of_cost_units: 285)
	Add 2 elements, resize (size: 35, capacity: 36, cost_units: 36, sum_of_cost_units: 321)
	Add 2 elements, resize (size: 37, capacity: 38, cost_units: 38, sum_of_cost_units: 359)
	Add 2 elements, resize (size: 39, capacity: 40, cost_units: 40, sum_of_cost_units: 399)
	Add 2 elements, resize (size: 41, capacity: 42, cost_units: 42, sum_of_cost_units: 441)
	Add 2 elements, resize (size: 43, capacity: 44, cost_units: 44, sum_of_cost_units: 485)
	Add 2 elements, resize (size: 45, capacity: 46, cost_units: 46, sum_of_cost_units: 531)
	Add 2 elements, resize (size: 47, capacity: 48, cost_units: 48, sum_of_cost_units: 579)
	Add 2 elements, resize (size: 49, capacity: 50, cost_units: 50, sum_of_cost_units: 629)
	Add 2 elements, resize (size: 50, capacity: 50, cost_units: 1,  sum_of_cost_units: 630)






